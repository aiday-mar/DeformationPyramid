

data.keys() :  dict_keys(['src_pcd_list', 'tgt_pcd_list', 'points', 'neighbors', 'pools', 'upsamples', 'features', 'stack_lengths', 'coarse_matches', 'coarse_flow', 'src_mask', 'tgt_mask', 'src_ind_coarse_split', 'tgt_ind_coarse_split', 'src_ind_coarse', 'tgt_ind_coarse', 'batched_rot', 'batched_trn', 'sflow_list', 'correspondences_list', 'depth_paths_list', 'cam_intrin', 'src_pcd_colors_list', 's_pcd', 't_pcd', 'position_layers', 'src_feats_nopos', 'tgt_feats_nopos', 'src_feats', 'tgt_feats', 'conf_matrix_pred', 'coarse_match_pred', 'R_s2t_pred', 't_s2t_pred'])
coarse_flow.shape :  torch.Size([1051, 3])
Before first compute_inlier_mask
s_pcd.shape :  torch.Size([1, 1051, 3])
t_pcd.shape :  torch.Size([1, 1064, 3])
batched_rot.shape :  torch.Size([1, 3, 3])
batched_trn.shape :  torch.Size([1, 3, 1])
batch_vec6d.shape :  torch.Size([1, 3666, 6])
batch_mask.shape :  torch.Size([1, 3666])
batch_index.shape :  torch.Size([1, 3666, 2])
vec_6d.shape :  torch.Size([3666, 6])
Entered into the case when intermediate_output_folder specified
When we do custom filtering
ldmk_s_np.shape :  (3453, 3)
neighborhood_center_index :  0
neighborhood_center_source :  [0.12241422 0.18246022 0.1903201 ]
distance_to_neighborhood_center.shape :  (3453,)
indices_minimum_distance :  [0 1 2 3 4 5]
indices_minimum_distance.shape :  (6,)
indices_second_minimum_distance :  [413 414 415 416 417 418]
indices_second_minimum_distance.shape :  (6,)
indices_third_minimum_distance :  [2044 2045 2046 2047]
indices_third_minimum_distance.shape :  (4,)
indices_1 :  [3 4 1]
indices_2 :  [2 3 0]
indices_3 :  [0 3 2]
np.where(distances_to_center < tau)[0].shape :  (206,)
point_indices_close_to_center.shape :  (206,)
source_points_close_to_center.shape :  (206, 3)
X :  [[0.12241422 0.18246022 0.1903201 ]
 [0.11267942 0.19146401 0.19045897]
 [0.13259424 0.17381631 0.18968093]]
Y :  [[0.19273987 0.28918827 0.2748079 ]
 [0.22697133 0.30915651 0.27445507]
 [0.20804857 0.24917746 0.28177488]]
mean_X :  [0.12256263 0.18258018 0.19015334]
mean_Y :  [0.20925326 0.28250741 0.27701262]
(Y - mean_Y) :  [[-0.01651338  0.00668086 -0.00220472]
 [ 0.01771807  0.0266491  -0.00255755]
 [-0.00120469 -0.03332995  0.00476226]]
(X - mean_X) :  [[-0.00014841 -0.00011996  0.00016677]
 [-0.00988321  0.00888383  0.00030563]
 [ 0.01003161 -0.00876387 -0.0004724 ]]
R :  [[ 0.20306457  0.70912174 -0.67521192]
 [-0.78162189  0.53274094  0.32442921]
 [ 0.58977284  0.46188034  0.66244589]]
t :  [ 0.18328735  0.21934581 -0.00556798]
norm_error.shape :  (206,)
np.where(norm_error > thr)[0].shape :  (39,)
X :  [[0.12241422 0.18246022 0.1903201 ]
 [0.11267942 0.19146401 0.19045897]
 [0.13259424 0.17381631 0.18968093]]
Y :  [[0.20929183 0.2896657  0.27319661]
 [0.19273987 0.28918827 0.2748079 ]
 [0.21464792 0.25342089 0.27799135]]
mean_X :  [0.12256263 0.18258018 0.19015334]
mean_Y :  [0.20555987 0.27742495 0.27533195]
(Y - mean_Y) :  [[ 0.00373196  0.01224075 -0.00213535]
 [-0.01282     0.01176331 -0.00052405]
 [ 0.00908804 -0.02400406  0.0026594 ]]
(X - mean_X) :  [[-0.00014841 -0.00011996  0.00016677]
 [-0.00988321  0.00888383  0.00030563]
 [ 0.01003161 -0.00876387 -0.0004724 ]]
R :  [[-0.0579588  -0.8781272   0.47490356]
 [-0.94633421  0.19983083  0.25400629]
 [-0.3179502  -0.43469559 -0.84258377]]
t :  [0.28268758 0.30862487 0.55388768]
norm_error.shape :  (206,)
np.where(norm_error > thr)[0].shape :  (113,)
X :  [[0.12241422 0.18246022 0.1903201 ]
 [0.11267942 0.19146401 0.19045897]
 [0.13259424 0.17381631 0.18968093]]
Y :  [[0.2098881  0.31050512 0.27467239]
 [0.19401959 0.30557379 0.27772239]
 [0.22797295 0.27071539 0.276205  ]]
mean_X :  [0.12256263 0.18258018 0.19015334]
mean_Y :  [0.21062688 0.2955981  0.27619993]
(Y - mean_Y) :  [[-7.38779704e-04  1.49070223e-02 -1.52753790e-03]
 [-1.66072945e-02  9.97569164e-03  1.52246157e-03]
 [ 1.73460742e-02 -2.48827140e-02  5.07632891e-06]]
(X - mean_X) :  [[-0.00014841 -0.00011996  0.00016677]
 [-0.00988321  0.00888383  0.00030563]
 [ 0.01003161 -0.00876387 -0.0004724 ]]
R :  [[ 0.11789506 -0.93906603  0.32288658]
 [-0.91719199  0.02164945  0.39785696]
 [-0.38060427 -0.34305436 -0.85875147]]
t :  [0.30623423 0.32840497 0.54877717]
norm_error.shape :  (206,)
np.where(norm_error > thr)[0].shape :  (119,)
ldmk_s.shape :  torch.Size([1386, 3])
len(final_indices) :  1386
data[vec_6d][0].shape :  torch.Size([3666, 6])
data[vec_6d_mask][0].shape :  torch.Size([3666])
data[vec_6d_ind][0].shape :  torch.Size([3666, 2])
coarse_flow.shape :  torch.Size([1051, 3])
s_pcd.shape :  torch.Size([1, 1051, 3])
t_pcd.shape :  torch.Size([1, 1064, 3])
batched_rot.shape :  torch.Size([1, 3, 3])
batched_trn.shape :  torch.Size([1, 3, 1])
batch_vec6d.shape :  torch.Size([1, 1386, 6])
batch_mask.shape :  torch.Size([1, 1386])
batch_index.shape :  torch.Size([1, 1386, 2])
inlier_conf.shape :  torch.Size([3666])
self.landmarks[0].shape :  torch.Size([1386, 3])
src_mean.shape :  torch.Size([1, 3])
0/1: full-epe: 36.097 
full-AccS: 0.161 
full-AccR: 0.713 
full-outlier: 98.563 
vis-epe: 36.097 
vis-AccS: 0.161 
vis-AccR: 0.713 
vis-outlier: 98.563 
occ-epe: nan 
occ-AccS: nan 
occ-AccR: nan 
occ-outlier: nan 


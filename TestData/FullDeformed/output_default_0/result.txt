

data.keys() :  dict_keys(['src_pcd_list', 'tgt_pcd_list', 'points', 'neighbors', 'pools', 'upsamples', 'features', 'stack_lengths', 'coarse_matches', 'coarse_flow', 'src_mask', 'tgt_mask', 'src_ind_coarse_split', 'tgt_ind_coarse_split', 'src_ind_coarse', 'tgt_ind_coarse', 'batched_rot', 'batched_trn', 'sflow_list', 'correspondences_list', 'depth_paths_list', 'cam_intrin', 'src_pcd_colors_list', 's_pcd', 't_pcd', 'position_layers', 'src_feats_nopos', 'tgt_feats_nopos', 'src_feats', 'tgt_feats', 'conf_matrix_pred', 'coarse_match_pred', 'R_s2t_pred', 't_s2t_pred'])
coarse_flow.shape :  torch.Size([1061, 3])
Before first compute_inlier_mask
s_pcd.shape :  torch.Size([1, 1061, 3])
t_pcd.shape :  torch.Size([1, 1048, 3])
batched_rot.shape :  torch.Size([1, 3, 3])
batched_trn.shape :  torch.Size([1, 3, 1])
batch_vec6d.shape :  torch.Size([1, 3118, 6])
batch_mask.shape :  torch.Size([1, 3118])
batch_index.shape :  torch.Size([1, 3118, 2])
vec_6d.shape :  torch.Size([3118, 6])
Entered into the case when intermediate_output_folder specified
When we do custom filtering
ldmk_s_np.shape :  (2868, 3)
neighborhood_center_index :  0
neighborhood_center_source :  [0.76374906 0.7877829  0.40732023]
distance_to_neighborhood_center.shape :  (2868,)
indices_minimum_distance :  [0 1 2 3]
indices_minimum_distance.shape :  (4,)
indices_second_minimum_distance :  [1226 1227 1228 1229]
indices_second_minimum_distance.shape :  (4,)
indices_third_minimum_distance :  [43 44 45 46 47]
indices_third_minimum_distance.shape :  (5,)
indices_1 :  [1 3 0]
indices_2 :  [3 0 2]
indices_3 :  [0 2 3]
np.where(distances_to_center < tau)[0].shape :  (154,)
point_indices_close_to_center.shape :  (154,)
source_points_close_to_center.shape :  (154, 3)
X :  [[0.76374906 0.78778291 0.40732023]
 [0.75898111 0.79454684 0.41351995]
 [0.76998925 0.76997942 0.41061825]]
Y :  [[ 0.10571668 -0.01241746  0.14783318]
 [ 0.11550561 -0.0084187   0.13606933]
 [ 0.0906006  -0.02357245  0.17380294]]
mean_X :  [0.76423981 0.78410306 0.41048614]
mean_Y :  [ 0.10394096 -0.01480287  0.15256848]
(Y - mean_Y) :  [[ 0.00177571  0.00238541 -0.0047353 ]
 [ 0.01156464  0.00638417 -0.01649916]
 [-0.01334036 -0.00876959  0.02123446]]
(X - mean_X) :  [[-0.00049074  0.00367985 -0.00316591]
 [-0.0052587   0.01044379  0.00303381]
 [ 0.00574944 -0.01412364  0.0001321 ]]
R :  [[-0.65228797  0.22846555  0.72271979]
 [-0.7258651   0.08628626 -0.6824035 ]
 [-0.21826648 -0.96972067  0.10955168]]
t :  [0.1266384  0.75239199 1.03476791]
norm_error.shape :  (154,)
np.where(norm_error > thr)[0].shape :  (116,)
X :  [[0.76374906 0.78778291 0.40732023]
 [0.75898111 0.79454684 0.41351995]
 [0.76998925 0.76997942 0.41061825]]
Y :  [[ 0.11550561 -0.0084187   0.13606933]
 [ 0.1133086  -0.02298318  0.1527566 ]
 [ 0.10966955 -0.03129072  0.19030274]]
mean_X :  [0.76423981 0.78410306 0.41048614]
mean_Y :  [ 0.11282792 -0.02089753  0.15970956]
(Y - mean_Y) :  [[ 0.00267769  0.01247884 -0.02364023]
 [ 0.00048068 -0.00208565 -0.00695296]
 [-0.00315837 -0.01039319  0.03059319]]
(X - mean_X) :  [[-0.00049074  0.00367985 -0.00316591]
 [-0.0052587   0.01044379  0.00303381]
 [ 0.00574944 -0.01412364  0.0001321 ]]
R :  [[-0.90754891 -0.27210359 -0.31986655]
 [ 0.2421235   0.28329675 -0.92796507]
 [ 0.34311977 -0.9196209  -0.19122298]]
t :  [ 1.15107096 -0.047155    0.69705571]
norm_error.shape :  (154,)
np.where(norm_error > thr)[0].shape :  (78,)
X :  [[0.76374906 0.78778291 0.40732023]
 [0.75898111 0.79454684 0.41351995]
 [0.76998925 0.76997942 0.41061825]]
Y :  [[ 0.1133086  -0.02298318  0.1527566 ]
 [ 0.09576328 -0.00636054  0.1564188 ]
 [ 0.11079084 -0.02815779  0.16903847]]
mean_X :  [0.76423981 0.78410306 0.41048614]
mean_Y :  [ 0.10662091 -0.01916717  0.15940463]
(Y - mean_Y) :  [[ 0.00668769 -0.00381601 -0.00664802]
 [-0.01085763  0.01280663 -0.00298583]
 [ 0.00416993 -0.00899062  0.00963385]]
(X - mean_X) :  [[-0.00049074  0.00367985 -0.00316591]
 [-0.0052587   0.01044379  0.00303381]
 [ 0.00574944 -0.01412364  0.0001321 ]]
R :  [[ 0.91271075 -0.01732872 -0.40823866]
 [ 0.23715164  0.83607038  0.49471751]
 [ 0.33274343 -0.54834846  0.76719996]]
t :  [-0.40974516 -1.05904792  0.0201456 ]
norm_error.shape :  (154,)
np.where(norm_error > thr)[0].shape :  (106,)
ldmk_s.shape :  torch.Size([698, 3])
len(final_indices) :  698
data[vec_6d][0].shape :  torch.Size([3118, 6])
data[vec_6d_mask][0].shape :  torch.Size([3118])
data[vec_6d_ind][0].shape :  torch.Size([3118, 2])
coarse_flow.shape :  torch.Size([1061, 3])
s_pcd.shape :  torch.Size([1, 1061, 3])
t_pcd.shape :  torch.Size([1, 1048, 3])
batched_rot.shape :  torch.Size([1, 3, 3])
batched_trn.shape :  torch.Size([1, 3, 1])
batch_vec6d.shape :  torch.Size([1, 698, 6])
batch_mask.shape :  torch.Size([1, 698])
batch_index.shape :  torch.Size([1, 698, 2])
inlier_conf.shape :  torch.Size([3118])
self.landmarks[0].shape :  torch.Size([698, 3])
src_mean.shape :  torch.Size([1, 3])
0/1: full-epe: 21.468 
full-AccS: 9.372 
full-AccR: 14.351 
full-outlier: 24.276 
vis-epe: 25.141 
vis-AccS: 0.663 
vis-AccR: 2.597 
vis-outlier: 29.795 
occ-epe: 5.316 
occ-AccS: 47.672 
occ-AccR: 66.046 
occ-outlier: 0.000 

